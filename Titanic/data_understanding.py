import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport seaborn as snsimport redata_train=pd.read_csv("train.csv")data_test=pd.read_csv("test.csv")# # 数据整体情况# data_train.info() #查看数据的缺失情况，类型# print(data_train.describe())#查看数值型数据的均值等指标#观察分类特征Pclass,Sex,Embarked与输出Survived的关系,可以发现Pclass越upper获救率越高，Sex女生获救率更高,Embarked没有明显特点#设置figure# f, (ax1, ax2, ax3) = plt.subplots(1,3,sharey=True,figsize=(10,3)) #sharey=True表示共y轴# sns.countplot(x='Pclass',hue='Survived',data=data_train,palette=['r','g'],alpha=0.5,ax=ax1) #countplot统计不同种类的次数，ax=ax1表示第一个子图# sns.countplot(x='Sex',hue='Survived',data=data_train,palette=['r','g'],alpha=0.5,ax=ax2)# sns.countplot(x='Embarked',hue='Survived',data=data_train,palette=['r','g'],alpha=0.5,ax=ax3)# plt.show()# SibSp,Parch和SibSp+Parch=family_size与获救人数的关系,family_size=1,2,3的获救率较高# data_train['family_size']=data_train['SibSp']+data_train['Parch']# f, (ax1, ax2, ax3) = plt.subplots(1,3,sharey=True,figsize=(10,3)) #sharey=True表示共y轴# sns.countplot(x='SibSp',hue='Survived',data=data_train,palette=['r','g'],alpha=0.5,ax=ax1) #countplot统计不同种类的次数，ax=ax1表示第一个子图# sns.countplot(x='Parch',hue='Survived',data=data_train,palette=['r','g'],alpha=0.5,ax=ax2)# sns.countplot(x='family_size',hue='Survived',data=data_train,palette=['r','g'],alpha=0.5,ax=ax3)# plt.show()#cabin的有无与获救的情况,有Cabin的获救率比较高# data_train.Cabin[data_train.Cabin.notnull()]=1# data_train.Cabin[data_train.Cabin.isnull()]=0# sns.countplot(x='Cabin',hue='Survived',data=data_train,palette=['r','g'],alpha=0.5)# plt.show()#观察数值特征的在Survived=0和Survived=1两种情况下的分布#Age在Survived=0和Survived=1的分布情况,发现年龄较小的更容易获救# g=sns.FacetGrid(data_train,col='Survived')# g.map(sns.distplot,'Age')# plt.show()#Fare在Survived=0和Survived=1的分布情况,发现Fare越高获救概率越高# g=sns.FacetGrid(data_train,col='Survived')# g.map(sns.distplot,'Fare')# plt.show()# #ticket字段的数字分布是否获救率有关,没有很明显的规律# def get_ticket_number(ticket):#     number=ticket.split(' ')[-1]#     if number.isnumeric(): #判断字符串中是否只包含数字字符#         return int(number)#     else:#         return np.nan## data_train['Ticket_number']=data_train['Ticket'].map(get_ticket_number)# data_train.ix[(data_train.Ticket_number.isnull()),'Ticket_number']=data_train['Ticket_number'].mean() #没有数字部分的用均值填充# g=sns.FacetGrid(data_train,col='Survived')# g.map(sns.distplot,'Ticket_number',kde=False)# plt.show()#观察特征的两两相关性corr=data_train.ix[:,'Pclass':'Embarked'].corr() #计算相关性矩阵，只能计算数值特征间的，默认是皮尔逊相关系数（度量两个变量之间的线性相关性）sns.heatmap(corr,cmap='Blues',annot=True)#annot=True显示相关系数值，plt.show()